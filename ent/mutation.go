// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/baturalpk/photo-bucket/ent/photosmetadata"
	"github.com/baturalpk/photo-bucket/ent/predicate"
	"github.com/baturalpk/photo-bucket/ent/profile"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePhotosMetadata = "PhotosMetadata"
	TypeProfile        = "Profile"
)

// PhotosMetadataMutation represents an operation that mutates the PhotosMetadata nodes in the graph.
type PhotosMetadataMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	tags          *[]string
	description   *string
	width         *int
	addwidth      *int
	height        *int
	addheight     *int
	image_format  *photosmetadata.ImageFormat
	url           *string
	uploaded_at   *time.Time
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*PhotosMetadata, error)
	predicates    []predicate.PhotosMetadata
}

var _ ent.Mutation = (*PhotosMetadataMutation)(nil)

// photosmetadataOption allows management of the mutation configuration using functional options.
type photosmetadataOption func(*PhotosMetadataMutation)

// newPhotosMetadataMutation creates new mutation for the PhotosMetadata entity.
func newPhotosMetadataMutation(c config, op Op, opts ...photosmetadataOption) *PhotosMetadataMutation {
	m := &PhotosMetadataMutation{
		config:        c,
		op:            op,
		typ:           TypePhotosMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhotosMetadataID sets the ID field of the mutation.
func withPhotosMetadataID(id uuid.UUID) photosmetadataOption {
	return func(m *PhotosMetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *PhotosMetadata
		)
		m.oldValue = func(ctx context.Context) (*PhotosMetadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PhotosMetadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhotosMetadata sets the old PhotosMetadata of the mutation.
func withPhotosMetadata(node *PhotosMetadata) photosmetadataOption {
	return func(m *PhotosMetadataMutation) {
		m.oldValue = func(context.Context) (*PhotosMetadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhotosMetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhotosMetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PhotosMetadata entities.
func (m *PhotosMetadataMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PhotosMetadataMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PhotosMetadataMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PhotosMetadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerID sets the "owner_id" field.
func (m *PhotosMetadataMutation) SetOwnerID(u uuid.UUID) {
	m.owner = &u
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *PhotosMetadataMutation) OwnerID() (r uuid.UUID, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldOwnerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "owner_id" field.
func (m *PhotosMetadataMutation) ClearOwnerID() {
	m.owner = nil
	m.clearedFields[photosmetadata.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "owner_id" field was cleared in this mutation.
func (m *PhotosMetadataMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[photosmetadata.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *PhotosMetadataMutation) ResetOwnerID() {
	m.owner = nil
	delete(m.clearedFields, photosmetadata.FieldOwnerID)
}

// SetTags sets the "tags" field.
func (m *PhotosMetadataMutation) SetTags(s []string) {
	m.tags = &s
}

// Tags returns the value of the "tags" field in the mutation.
func (m *PhotosMetadataMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// ClearTags clears the value of the "tags" field.
func (m *PhotosMetadataMutation) ClearTags() {
	m.tags = nil
	m.clearedFields[photosmetadata.FieldTags] = struct{}{}
}

// TagsCleared returns if the "tags" field was cleared in this mutation.
func (m *PhotosMetadataMutation) TagsCleared() bool {
	_, ok := m.clearedFields[photosmetadata.FieldTags]
	return ok
}

// ResetTags resets all changes to the "tags" field.
func (m *PhotosMetadataMutation) ResetTags() {
	m.tags = nil
	delete(m.clearedFields, photosmetadata.FieldTags)
}

// SetDescription sets the "description" field.
func (m *PhotosMetadataMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PhotosMetadataMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PhotosMetadataMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[photosmetadata.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PhotosMetadataMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[photosmetadata.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PhotosMetadataMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, photosmetadata.FieldDescription)
}

// SetWidth sets the "width" field.
func (m *PhotosMetadataMutation) SetWidth(i int) {
	m.width = &i
	m.addwidth = nil
}

// Width returns the value of the "width" field in the mutation.
func (m *PhotosMetadataMutation) Width() (r int, exists bool) {
	v := m.width
	if v == nil {
		return
	}
	return *v, true
}

// OldWidth returns the old "width" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldWidth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWidth: %w", err)
	}
	return oldValue.Width, nil
}

// AddWidth adds i to the "width" field.
func (m *PhotosMetadataMutation) AddWidth(i int) {
	if m.addwidth != nil {
		*m.addwidth += i
	} else {
		m.addwidth = &i
	}
}

// AddedWidth returns the value that was added to the "width" field in this mutation.
func (m *PhotosMetadataMutation) AddedWidth() (r int, exists bool) {
	v := m.addwidth
	if v == nil {
		return
	}
	return *v, true
}

// ResetWidth resets all changes to the "width" field.
func (m *PhotosMetadataMutation) ResetWidth() {
	m.width = nil
	m.addwidth = nil
}

// SetHeight sets the "height" field.
func (m *PhotosMetadataMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *PhotosMetadataMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *PhotosMetadataMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *PhotosMetadataMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *PhotosMetadataMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetImageFormat sets the "image_format" field.
func (m *PhotosMetadataMutation) SetImageFormat(pf photosmetadata.ImageFormat) {
	m.image_format = &pf
}

// ImageFormat returns the value of the "image_format" field in the mutation.
func (m *PhotosMetadataMutation) ImageFormat() (r photosmetadata.ImageFormat, exists bool) {
	v := m.image_format
	if v == nil {
		return
	}
	return *v, true
}

// OldImageFormat returns the old "image_format" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldImageFormat(ctx context.Context) (v photosmetadata.ImageFormat, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageFormat: %w", err)
	}
	return oldValue.ImageFormat, nil
}

// ResetImageFormat resets all changes to the "image_format" field.
func (m *PhotosMetadataMutation) ResetImageFormat() {
	m.image_format = nil
}

// SetURL sets the "url" field.
func (m *PhotosMetadataMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *PhotosMetadataMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *PhotosMetadataMutation) ResetURL() {
	m.url = nil
}

// SetUploadedAt sets the "uploaded_at" field.
func (m *PhotosMetadataMutation) SetUploadedAt(t time.Time) {
	m.uploaded_at = &t
}

// UploadedAt returns the value of the "uploaded_at" field in the mutation.
func (m *PhotosMetadataMutation) UploadedAt() (r time.Time, exists bool) {
	v := m.uploaded_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUploadedAt returns the old "uploaded_at" field's value of the PhotosMetadata entity.
// If the PhotosMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotosMetadataMutation) OldUploadedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploadedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploadedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploadedAt: %w", err)
	}
	return oldValue.UploadedAt, nil
}

// ResetUploadedAt resets all changes to the "uploaded_at" field.
func (m *PhotosMetadataMutation) ResetUploadedAt() {
	m.uploaded_at = nil
}

// ClearOwner clears the "owner" edge to the Profile entity.
func (m *PhotosMetadataMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Profile entity was cleared.
func (m *PhotosMetadataMutation) OwnerCleared() bool {
	return m.OwnerIDCleared() || m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PhotosMetadataMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PhotosMetadataMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the PhotosMetadataMutation builder.
func (m *PhotosMetadataMutation) Where(ps ...predicate.PhotosMetadata) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PhotosMetadataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PhotosMetadata).
func (m *PhotosMetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PhotosMetadataMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.owner != nil {
		fields = append(fields, photosmetadata.FieldOwnerID)
	}
	if m.tags != nil {
		fields = append(fields, photosmetadata.FieldTags)
	}
	if m.description != nil {
		fields = append(fields, photosmetadata.FieldDescription)
	}
	if m.width != nil {
		fields = append(fields, photosmetadata.FieldWidth)
	}
	if m.height != nil {
		fields = append(fields, photosmetadata.FieldHeight)
	}
	if m.image_format != nil {
		fields = append(fields, photosmetadata.FieldImageFormat)
	}
	if m.url != nil {
		fields = append(fields, photosmetadata.FieldURL)
	}
	if m.uploaded_at != nil {
		fields = append(fields, photosmetadata.FieldUploadedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PhotosMetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case photosmetadata.FieldOwnerID:
		return m.OwnerID()
	case photosmetadata.FieldTags:
		return m.Tags()
	case photosmetadata.FieldDescription:
		return m.Description()
	case photosmetadata.FieldWidth:
		return m.Width()
	case photosmetadata.FieldHeight:
		return m.Height()
	case photosmetadata.FieldImageFormat:
		return m.ImageFormat()
	case photosmetadata.FieldURL:
		return m.URL()
	case photosmetadata.FieldUploadedAt:
		return m.UploadedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PhotosMetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case photosmetadata.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case photosmetadata.FieldTags:
		return m.OldTags(ctx)
	case photosmetadata.FieldDescription:
		return m.OldDescription(ctx)
	case photosmetadata.FieldWidth:
		return m.OldWidth(ctx)
	case photosmetadata.FieldHeight:
		return m.OldHeight(ctx)
	case photosmetadata.FieldImageFormat:
		return m.OldImageFormat(ctx)
	case photosmetadata.FieldURL:
		return m.OldURL(ctx)
	case photosmetadata.FieldUploadedAt:
		return m.OldUploadedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PhotosMetadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhotosMetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case photosmetadata.FieldOwnerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case photosmetadata.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case photosmetadata.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case photosmetadata.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWidth(v)
		return nil
	case photosmetadata.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case photosmetadata.FieldImageFormat:
		v, ok := value.(photosmetadata.ImageFormat)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageFormat(v)
		return nil
	case photosmetadata.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case photosmetadata.FieldUploadedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploadedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PhotosMetadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PhotosMetadataMutation) AddedFields() []string {
	var fields []string
	if m.addwidth != nil {
		fields = append(fields, photosmetadata.FieldWidth)
	}
	if m.addheight != nil {
		fields = append(fields, photosmetadata.FieldHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PhotosMetadataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case photosmetadata.FieldWidth:
		return m.AddedWidth()
	case photosmetadata.FieldHeight:
		return m.AddedHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhotosMetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case photosmetadata.FieldWidth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWidth(v)
		return nil
	case photosmetadata.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	}
	return fmt.Errorf("unknown PhotosMetadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PhotosMetadataMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(photosmetadata.FieldOwnerID) {
		fields = append(fields, photosmetadata.FieldOwnerID)
	}
	if m.FieldCleared(photosmetadata.FieldTags) {
		fields = append(fields, photosmetadata.FieldTags)
	}
	if m.FieldCleared(photosmetadata.FieldDescription) {
		fields = append(fields, photosmetadata.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PhotosMetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhotosMetadataMutation) ClearField(name string) error {
	switch name {
	case photosmetadata.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	case photosmetadata.FieldTags:
		m.ClearTags()
		return nil
	case photosmetadata.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown PhotosMetadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PhotosMetadataMutation) ResetField(name string) error {
	switch name {
	case photosmetadata.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case photosmetadata.FieldTags:
		m.ResetTags()
		return nil
	case photosmetadata.FieldDescription:
		m.ResetDescription()
		return nil
	case photosmetadata.FieldWidth:
		m.ResetWidth()
		return nil
	case photosmetadata.FieldHeight:
		m.ResetHeight()
		return nil
	case photosmetadata.FieldImageFormat:
		m.ResetImageFormat()
		return nil
	case photosmetadata.FieldURL:
		m.ResetURL()
		return nil
	case photosmetadata.FieldUploadedAt:
		m.ResetUploadedAt()
		return nil
	}
	return fmt.Errorf("unknown PhotosMetadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PhotosMetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, photosmetadata.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PhotosMetadataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case photosmetadata.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PhotosMetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PhotosMetadataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PhotosMetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, photosmetadata.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PhotosMetadataMutation) EdgeCleared(name string) bool {
	switch name {
	case photosmetadata.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PhotosMetadataMutation) ClearEdge(name string) error {
	switch name {
	case photosmetadata.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown PhotosMetadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PhotosMetadataMutation) ResetEdge(name string) error {
	switch name {
	case photosmetadata.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown PhotosMetadata edge %s", name)
}

// ProfileMutation represents an operation that mutates the Profile nodes in the graph.
type ProfileMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	username          *string
	password_hash     *string
	picture_url       *string
	name              *string
	biography         *string
	email             *string
	phone             *string
	is_email_verified *bool
	is_phone_verified *bool
	created_at        *time.Time
	clearedFields     map[string]struct{}
	photos            map[uuid.UUID]struct{}
	removedphotos     map[uuid.UUID]struct{}
	clearedphotos     bool
	done              bool
	oldValue          func(context.Context) (*Profile, error)
	predicates        []predicate.Profile
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// profileOption allows management of the mutation configuration using functional options.
type profileOption func(*ProfileMutation)

// newProfileMutation creates new mutation for the Profile entity.
func newProfileMutation(c config, op Op, opts ...profileOption) *ProfileMutation {
	m := &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfileID sets the ID field of the mutation.
func withProfileID(id uuid.UUID) profileOption {
	return func(m *ProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Profile
		)
		m.oldValue = func(ctx context.Context) (*Profile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfile sets the old Profile of the mutation.
func withProfile(node *Profile) profileOption {
	return func(m *ProfileMutation) {
		m.oldValue = func(context.Context) (*Profile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Profile entities.
func (m *ProfileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfileMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Profile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *ProfileMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ProfileMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *ProfileMutation) ResetUsername() {
	m.username = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *ProfileMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *ProfileMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *ProfileMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetPictureURL sets the "picture_url" field.
func (m *ProfileMutation) SetPictureURL(s string) {
	m.picture_url = &s
}

// PictureURL returns the value of the "picture_url" field in the mutation.
func (m *ProfileMutation) PictureURL() (r string, exists bool) {
	v := m.picture_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPictureURL returns the old "picture_url" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldPictureURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPictureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPictureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPictureURL: %w", err)
	}
	return oldValue.PictureURL, nil
}

// ClearPictureURL clears the value of the "picture_url" field.
func (m *ProfileMutation) ClearPictureURL() {
	m.picture_url = nil
	m.clearedFields[profile.FieldPictureURL] = struct{}{}
}

// PictureURLCleared returns if the "picture_url" field was cleared in this mutation.
func (m *ProfileMutation) PictureURLCleared() bool {
	_, ok := m.clearedFields[profile.FieldPictureURL]
	return ok
}

// ResetPictureURL resets all changes to the "picture_url" field.
func (m *ProfileMutation) ResetPictureURL() {
	m.picture_url = nil
	delete(m.clearedFields, profile.FieldPictureURL)
}

// SetName sets the "name" field.
func (m *ProfileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProfileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProfileMutation) ResetName() {
	m.name = nil
}

// SetBiography sets the "biography" field.
func (m *ProfileMutation) SetBiography(s string) {
	m.biography = &s
}

// Biography returns the value of the "biography" field in the mutation.
func (m *ProfileMutation) Biography() (r string, exists bool) {
	v := m.biography
	if v == nil {
		return
	}
	return *v, true
}

// OldBiography returns the old "biography" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldBiography(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBiography is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBiography requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBiography: %w", err)
	}
	return oldValue.Biography, nil
}

// ResetBiography resets all changes to the "biography" field.
func (m *ProfileMutation) ResetBiography() {
	m.biography = nil
}

// SetEmail sets the "email" field.
func (m *ProfileMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *ProfileMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *ProfileMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[profile.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *ProfileMutation) EmailCleared() bool {
	_, ok := m.clearedFields[profile.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *ProfileMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, profile.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *ProfileMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *ProfileMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *ProfileMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[profile.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *ProfileMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[profile.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *ProfileMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, profile.FieldPhone)
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (m *ProfileMutation) SetIsEmailVerified(b bool) {
	m.is_email_verified = &b
}

// IsEmailVerified returns the value of the "is_email_verified" field in the mutation.
func (m *ProfileMutation) IsEmailVerified() (r bool, exists bool) {
	v := m.is_email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEmailVerified returns the old "is_email_verified" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldIsEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEmailVerified: %w", err)
	}
	return oldValue.IsEmailVerified, nil
}

// ResetIsEmailVerified resets all changes to the "is_email_verified" field.
func (m *ProfileMutation) ResetIsEmailVerified() {
	m.is_email_verified = nil
}

// SetIsPhoneVerified sets the "is_phone_verified" field.
func (m *ProfileMutation) SetIsPhoneVerified(b bool) {
	m.is_phone_verified = &b
}

// IsPhoneVerified returns the value of the "is_phone_verified" field in the mutation.
func (m *ProfileMutation) IsPhoneVerified() (r bool, exists bool) {
	v := m.is_phone_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPhoneVerified returns the old "is_phone_verified" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldIsPhoneVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPhoneVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPhoneVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPhoneVerified: %w", err)
	}
	return oldValue.IsPhoneVerified, nil
}

// ResetIsPhoneVerified resets all changes to the "is_phone_verified" field.
func (m *ProfileMutation) ResetIsPhoneVerified() {
	m.is_phone_verified = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddPhotoIDs adds the "photos" edge to the PhotosMetadata entity by ids.
func (m *ProfileMutation) AddPhotoIDs(ids ...uuid.UUID) {
	if m.photos == nil {
		m.photos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.photos[ids[i]] = struct{}{}
	}
}

// ClearPhotos clears the "photos" edge to the PhotosMetadata entity.
func (m *ProfileMutation) ClearPhotos() {
	m.clearedphotos = true
}

// PhotosCleared reports if the "photos" edge to the PhotosMetadata entity was cleared.
func (m *ProfileMutation) PhotosCleared() bool {
	return m.clearedphotos
}

// RemovePhotoIDs removes the "photos" edge to the PhotosMetadata entity by IDs.
func (m *ProfileMutation) RemovePhotoIDs(ids ...uuid.UUID) {
	if m.removedphotos == nil {
		m.removedphotos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.photos, ids[i])
		m.removedphotos[ids[i]] = struct{}{}
	}
}

// RemovedPhotos returns the removed IDs of the "photos" edge to the PhotosMetadata entity.
func (m *ProfileMutation) RemovedPhotosIDs() (ids []uuid.UUID) {
	for id := range m.removedphotos {
		ids = append(ids, id)
	}
	return
}

// PhotosIDs returns the "photos" edge IDs in the mutation.
func (m *ProfileMutation) PhotosIDs() (ids []uuid.UUID) {
	for id := range m.photos {
		ids = append(ids, id)
	}
	return
}

// ResetPhotos resets all changes to the "photos" edge.
func (m *ProfileMutation) ResetPhotos() {
	m.photos = nil
	m.clearedphotos = false
	m.removedphotos = nil
}

// Where appends a list predicates to the ProfileMutation builder.
func (m *ProfileMutation) Where(ps ...predicate.Profile) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.username != nil {
		fields = append(fields, profile.FieldUsername)
	}
	if m.password_hash != nil {
		fields = append(fields, profile.FieldPasswordHash)
	}
	if m.picture_url != nil {
		fields = append(fields, profile.FieldPictureURL)
	}
	if m.name != nil {
		fields = append(fields, profile.FieldName)
	}
	if m.biography != nil {
		fields = append(fields, profile.FieldBiography)
	}
	if m.email != nil {
		fields = append(fields, profile.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, profile.FieldPhone)
	}
	if m.is_email_verified != nil {
		fields = append(fields, profile.FieldIsEmailVerified)
	}
	if m.is_phone_verified != nil {
		fields = append(fields, profile.FieldIsPhoneVerified)
	}
	if m.created_at != nil {
		fields = append(fields, profile.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldUsername:
		return m.Username()
	case profile.FieldPasswordHash:
		return m.PasswordHash()
	case profile.FieldPictureURL:
		return m.PictureURL()
	case profile.FieldName:
		return m.Name()
	case profile.FieldBiography:
		return m.Biography()
	case profile.FieldEmail:
		return m.Email()
	case profile.FieldPhone:
		return m.Phone()
	case profile.FieldIsEmailVerified:
		return m.IsEmailVerified()
	case profile.FieldIsPhoneVerified:
		return m.IsPhoneVerified()
	case profile.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profile.FieldUsername:
		return m.OldUsername(ctx)
	case profile.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case profile.FieldPictureURL:
		return m.OldPictureURL(ctx)
	case profile.FieldName:
		return m.OldName(ctx)
	case profile.FieldBiography:
		return m.OldBiography(ctx)
	case profile.FieldEmail:
		return m.OldEmail(ctx)
	case profile.FieldPhone:
		return m.OldPhone(ctx)
	case profile.FieldIsEmailVerified:
		return m.OldIsEmailVerified(ctx)
	case profile.FieldIsPhoneVerified:
		return m.OldIsPhoneVerified(ctx)
	case profile.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Profile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case profile.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case profile.FieldPictureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPictureURL(v)
		return nil
	case profile.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case profile.FieldBiography:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBiography(v)
		return nil
	case profile.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case profile.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case profile.FieldIsEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEmailVerified(v)
		return nil
	case profile.FieldIsPhoneVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPhoneVerified(v)
		return nil
	case profile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profile.FieldPictureURL) {
		fields = append(fields, profile.FieldPictureURL)
	}
	if m.FieldCleared(profile.FieldEmail) {
		fields = append(fields, profile.FieldEmail)
	}
	if m.FieldCleared(profile.FieldPhone) {
		fields = append(fields, profile.FieldPhone)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	switch name {
	case profile.FieldPictureURL:
		m.ClearPictureURL()
		return nil
	case profile.FieldEmail:
		m.ClearEmail()
		return nil
	case profile.FieldPhone:
		m.ClearPhone()
		return nil
	}
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldUsername:
		m.ResetUsername()
		return nil
	case profile.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case profile.FieldPictureURL:
		m.ResetPictureURL()
		return nil
	case profile.FieldName:
		m.ResetName()
		return nil
	case profile.FieldBiography:
		m.ResetBiography()
		return nil
	case profile.FieldEmail:
		m.ResetEmail()
		return nil
	case profile.FieldPhone:
		m.ResetPhone()
		return nil
	case profile.FieldIsEmailVerified:
		m.ResetIsEmailVerified()
		return nil
	case profile.FieldIsPhoneVerified:
		m.ResetIsPhoneVerified()
		return nil
	case profile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.photos != nil {
		edges = append(edges, profile.EdgePhotos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgePhotos:
		ids := make([]ent.Value, 0, len(m.photos))
		for id := range m.photos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedphotos != nil {
		edges = append(edges, profile.EdgePhotos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgePhotos:
		ids := make([]ent.Value, 0, len(m.removedphotos))
		for id := range m.removedphotos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedphotos {
		edges = append(edges, profile.EdgePhotos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case profile.EdgePhotos:
		return m.clearedphotos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgePhotos:
		m.ResetPhotos()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}
