// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baturalpk/photo-bucket/ent/photosmetadata"
	"github.com/baturalpk/photo-bucket/ent/profile"
	"github.com/google/uuid"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (pc *ProfileCreate) SetUsername(s string) *ProfileCreate {
	pc.mutation.SetUsername(s)
	return pc
}

// SetPasswordHash sets the "password_hash" field.
func (pc *ProfileCreate) SetPasswordHash(s string) *ProfileCreate {
	pc.mutation.SetPasswordHash(s)
	return pc
}

// SetPictureURL sets the "picture_url" field.
func (pc *ProfileCreate) SetPictureURL(s string) *ProfileCreate {
	pc.mutation.SetPictureURL(s)
	return pc
}

// SetNillablePictureURL sets the "picture_url" field if the given value is not nil.
func (pc *ProfileCreate) SetNillablePictureURL(s *string) *ProfileCreate {
	if s != nil {
		pc.SetPictureURL(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProfileCreate) SetName(s string) *ProfileCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableName(s *string) *ProfileCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetBiography sets the "biography" field.
func (pc *ProfileCreate) SetBiography(s string) *ProfileCreate {
	pc.mutation.SetBiography(s)
	return pc
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBiography(s *string) *ProfileCreate {
	if s != nil {
		pc.SetBiography(*s)
	}
	return pc
}

// SetEmail sets the "email" field.
func (pc *ProfileCreate) SetEmail(s string) *ProfileCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableEmail(s *string) *ProfileCreate {
	if s != nil {
		pc.SetEmail(*s)
	}
	return pc
}

// SetPhone sets the "phone" field.
func (pc *ProfileCreate) SetPhone(s string) *ProfileCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pc *ProfileCreate) SetNillablePhone(s *string) *ProfileCreate {
	if s != nil {
		pc.SetPhone(*s)
	}
	return pc
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (pc *ProfileCreate) SetIsEmailVerified(b bool) *ProfileCreate {
	pc.mutation.SetIsEmailVerified(b)
	return pc
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableIsEmailVerified(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetIsEmailVerified(*b)
	}
	return pc
}

// SetIsPhoneVerified sets the "is_phone_verified" field.
func (pc *ProfileCreate) SetIsPhoneVerified(b bool) *ProfileCreate {
	pc.mutation.SetIsPhoneVerified(b)
	return pc
}

// SetNillableIsPhoneVerified sets the "is_phone_verified" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableIsPhoneVerified(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetIsPhoneVerified(*b)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProfileCreate) SetCreatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCreatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProfileCreate) SetID(u uuid.UUID) *ProfileCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableID(u *uuid.UUID) *ProfileCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddPhotoIDs adds the "photos" edge to the PhotosMetadata entity by IDs.
func (pc *ProfileCreate) AddPhotoIDs(ids ...uuid.UUID) *ProfileCreate {
	pc.mutation.AddPhotoIDs(ids...)
	return pc
}

// AddPhotos adds the "photos" edges to the PhotosMetadata entity.
func (pc *ProfileCreate) AddPhotos(p ...*PhotosMetadata) *ProfileCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPhotoIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	var (
		err  error
		node *Profile
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfileCreate) defaults() {
	if _, ok := pc.mutation.Name(); !ok {
		v := profile.DefaultName
		pc.mutation.SetName(v)
	}
	if _, ok := pc.mutation.Biography(); !ok {
		v := profile.DefaultBiography
		pc.mutation.SetBiography(v)
	}
	if _, ok := pc.mutation.IsEmailVerified(); !ok {
		v := profile.DefaultIsEmailVerified
		pc.mutation.SetIsEmailVerified(v)
	}
	if _, ok := pc.mutation.IsPhoneVerified(); !ok {
		v := profile.DefaultIsPhoneVerified
		pc.mutation.SetIsPhoneVerified(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := profile.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := profile.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "Profile.username"`)}
	}
	if v, ok := pc.mutation.Username(); ok {
		if err := profile.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Profile.username": %w`, err)}
		}
	}
	if _, ok := pc.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "Profile.password_hash"`)}
	}
	if v, ok := pc.mutation.PasswordHash(); ok {
		if err := profile.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Profile.password_hash": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Profile.name"`)}
	}
	if _, ok := pc.mutation.Biography(); !ok {
		return &ValidationError{Name: "biography", err: errors.New(`ent: missing required field "Profile.biography"`)}
	}
	if _, ok := pc.mutation.IsEmailVerified(); !ok {
		return &ValidationError{Name: "is_email_verified", err: errors.New(`ent: missing required field "Profile.is_email_verified"`)}
	}
	if _, ok := pc.mutation.IsPhoneVerified(); !ok {
		return &ValidationError{Name: "is_phone_verified", err: errors.New(`ent: missing required field "Profile.is_phone_verified"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Profile.created_at"`)}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profile.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := pc.mutation.PasswordHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPasswordHash,
		})
		_node.PasswordHash = value
	}
	if value, ok := pc.mutation.PictureURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPictureURL,
		})
		_node.PictureURL = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Biography(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldBiography,
		})
		_node.Biography = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := pc.mutation.IsEmailVerified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldIsEmailVerified,
		})
		_node.IsEmailVerified = value
	}
	if value, ok := pc.mutation.IsPhoneVerified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldIsPhoneVerified,
		})
		_node.IsPhoneVerified = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profile.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := pc.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
