// Code generated by entc, DO NOT EDIT.

package profile

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldPictureURL holds the string denoting the picture_url field in the database.
	FieldPictureURL = "picture_url"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBiography holds the string denoting the biography field in the database.
	FieldBiography = "biography"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldIsEmailVerified holds the string denoting the is_email_verified field in the database.
	FieldIsEmailVerified = "is_email_verified"
	// FieldIsPhoneVerified holds the string denoting the is_phone_verified field in the database.
	FieldIsPhoneVerified = "is_phone_verified"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgePhotos holds the string denoting the photos edge name in mutations.
	EdgePhotos = "photos"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// PhotosTable is the table that holds the photos relation/edge.
	PhotosTable = "photos_metadata"
	// PhotosInverseTable is the table name for the PhotosMetadata entity.
	// It exists in this package in order to avoid circular dependency with the "photosmetadata" package.
	PhotosInverseTable = "photos_metadata"
	// PhotosColumn is the table column denoting the photos relation/edge.
	PhotosColumn = "owner_id"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPasswordHash,
	FieldPictureURL,
	FieldName,
	FieldBiography,
	FieldEmail,
	FieldPhone,
	FieldIsEmailVerified,
	FieldIsPhoneVerified,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultBiography holds the default value on creation for the "biography" field.
	DefaultBiography string
	// DefaultIsEmailVerified holds the default value on creation for the "is_email_verified" field.
	DefaultIsEmailVerified bool
	// DefaultIsPhoneVerified holds the default value on creation for the "is_phone_verified" field.
	DefaultIsPhoneVerified bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
