// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baturalpk/photo-bucket/ent/photosmetadata"
	"github.com/baturalpk/photo-bucket/ent/profile"
	"github.com/google/uuid"
)

// PhotosMetadataCreate is the builder for creating a PhotosMetadata entity.
type PhotosMetadataCreate struct {
	config
	mutation *PhotosMetadataMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (pmc *PhotosMetadataCreate) SetOwnerID(u uuid.UUID) *PhotosMetadataCreate {
	pmc.mutation.SetOwnerID(u)
	return pmc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pmc *PhotosMetadataCreate) SetNillableOwnerID(u *uuid.UUID) *PhotosMetadataCreate {
	if u != nil {
		pmc.SetOwnerID(*u)
	}
	return pmc
}

// SetTags sets the "tags" field.
func (pmc *PhotosMetadataCreate) SetTags(s []string) *PhotosMetadataCreate {
	pmc.mutation.SetTags(s)
	return pmc
}

// SetDescription sets the "description" field.
func (pmc *PhotosMetadataCreate) SetDescription(s string) *PhotosMetadataCreate {
	pmc.mutation.SetDescription(s)
	return pmc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmc *PhotosMetadataCreate) SetNillableDescription(s *string) *PhotosMetadataCreate {
	if s != nil {
		pmc.SetDescription(*s)
	}
	return pmc
}

// SetWidth sets the "width" field.
func (pmc *PhotosMetadataCreate) SetWidth(i int) *PhotosMetadataCreate {
	pmc.mutation.SetWidth(i)
	return pmc
}

// SetHeight sets the "height" field.
func (pmc *PhotosMetadataCreate) SetHeight(i int) *PhotosMetadataCreate {
	pmc.mutation.SetHeight(i)
	return pmc
}

// SetImageFormat sets the "image_format" field.
func (pmc *PhotosMetadataCreate) SetImageFormat(pf photosmetadata.ImageFormat) *PhotosMetadataCreate {
	pmc.mutation.SetImageFormat(pf)
	return pmc
}

// SetURL sets the "url" field.
func (pmc *PhotosMetadataCreate) SetURL(s string) *PhotosMetadataCreate {
	pmc.mutation.SetURL(s)
	return pmc
}

// SetUploadedAt sets the "uploaded_at" field.
func (pmc *PhotosMetadataCreate) SetUploadedAt(t time.Time) *PhotosMetadataCreate {
	pmc.mutation.SetUploadedAt(t)
	return pmc
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (pmc *PhotosMetadataCreate) SetNillableUploadedAt(t *time.Time) *PhotosMetadataCreate {
	if t != nil {
		pmc.SetUploadedAt(*t)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PhotosMetadataCreate) SetID(u uuid.UUID) *PhotosMetadataCreate {
	pmc.mutation.SetID(u)
	return pmc
}

// SetOwner sets the "owner" edge to the Profile entity.
func (pmc *PhotosMetadataCreate) SetOwner(p *Profile) *PhotosMetadataCreate {
	return pmc.SetOwnerID(p.ID)
}

// Mutation returns the PhotosMetadataMutation object of the builder.
func (pmc *PhotosMetadataCreate) Mutation() *PhotosMetadataMutation {
	return pmc.mutation
}

// Save creates the PhotosMetadata in the database.
func (pmc *PhotosMetadataCreate) Save(ctx context.Context) (*PhotosMetadata, error) {
	var (
		err  error
		node *PhotosMetadata
	)
	pmc.defaults()
	if len(pmc.hooks) == 0 {
		if err = pmc.check(); err != nil {
			return nil, err
		}
		node, err = pmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhotosMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmc.check(); err != nil {
				return nil, err
			}
			pmc.mutation = mutation
			if node, err = pmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pmc.hooks) - 1; i >= 0; i-- {
			if pmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PhotosMetadataCreate) SaveX(ctx context.Context) *PhotosMetadata {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PhotosMetadataCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PhotosMetadataCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PhotosMetadataCreate) defaults() {
	if _, ok := pmc.mutation.UploadedAt(); !ok {
		v := photosmetadata.DefaultUploadedAt()
		pmc.mutation.SetUploadedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PhotosMetadataCreate) check() error {
	if _, ok := pmc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "PhotosMetadata.width"`)}
	}
	if v, ok := pmc.mutation.Width(); ok {
		if err := photosmetadata.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "PhotosMetadata.width": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "PhotosMetadata.height"`)}
	}
	if v, ok := pmc.mutation.Height(); ok {
		if err := photosmetadata.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "PhotosMetadata.height": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.ImageFormat(); !ok {
		return &ValidationError{Name: "image_format", err: errors.New(`ent: missing required field "PhotosMetadata.image_format"`)}
	}
	if v, ok := pmc.mutation.ImageFormat(); ok {
		if err := photosmetadata.ImageFormatValidator(v); err != nil {
			return &ValidationError{Name: "image_format", err: fmt.Errorf(`ent: validator failed for field "PhotosMetadata.image_format": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "PhotosMetadata.url"`)}
	}
	if _, ok := pmc.mutation.UploadedAt(); !ok {
		return &ValidationError{Name: "uploaded_at", err: errors.New(`ent: missing required field "PhotosMetadata.uploaded_at"`)}
	}
	return nil
}

func (pmc *PhotosMetadataCreate) sqlSave(ctx context.Context) (*PhotosMetadata, error) {
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pmc *PhotosMetadataCreate) createSpec() (*PhotosMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &PhotosMetadata{config: pmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: photosmetadata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: photosmetadata.FieldID,
			},
		}
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pmc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: photosmetadata.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := pmc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photosmetadata.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := pmc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: photosmetadata.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := pmc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: photosmetadata.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := pmc.mutation.ImageFormat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: photosmetadata.FieldImageFormat,
		})
		_node.ImageFormat = value
	}
	if value, ok := pmc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photosmetadata.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := pmc.mutation.UploadedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: photosmetadata.FieldUploadedAt,
		})
		_node.UploadedAt = value
	}
	if nodes := pmc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photosmetadata.OwnerTable,
			Columns: []string{photosmetadata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PhotosMetadataCreateBulk is the builder for creating many PhotosMetadata entities in bulk.
type PhotosMetadataCreateBulk struct {
	config
	builders []*PhotosMetadataCreate
}

// Save creates the PhotosMetadata entities in the database.
func (pmcb *PhotosMetadataCreateBulk) Save(ctx context.Context) ([]*PhotosMetadata, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PhotosMetadata, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhotosMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PhotosMetadataCreateBulk) SaveX(ctx context.Context) []*PhotosMetadata {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PhotosMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PhotosMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
