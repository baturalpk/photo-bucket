// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/baturalpk/photo-bucket/ent/profile"
	"github.com/google/uuid"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"-"`
	// PictureURL holds the value of the "picture_url" field.
	PictureURL string `json:"picture_url,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Biography holds the value of the "biography" field.
	Biography string `json:"biography,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// IsEmailVerified holds the value of the "is_email_verified" field.
	IsEmailVerified bool `json:"is_email_verified,omitempty"`
	// IsPhoneVerified holds the value of the "is_phone_verified" field.
	IsPhoneVerified bool `json:"is_phone_verified,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges ProfileEdges `json:"edges"`
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// Photos holds the value of the photos edge.
	Photos []*PhotosMetadata `json:"photos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PhotosOrErr returns the Photos value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) PhotosOrErr() ([]*PhotosMetadata, error) {
	if e.loadedTypes[0] {
		return e.Photos, nil
	}
	return nil, &NotLoadedError{edge: "photos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldIsEmailVerified, profile.FieldIsPhoneVerified:
			values[i] = new(sql.NullBool)
		case profile.FieldUsername, profile.FieldPasswordHash, profile.FieldPictureURL, profile.FieldName, profile.FieldBiography, profile.FieldEmail, profile.FieldPhone:
			values[i] = new(sql.NullString)
		case profile.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case profile.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Profile", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case profile.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				pr.Username = value.String
			}
		case profile.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				pr.PasswordHash = value.String
			}
		case profile.FieldPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_url", values[i])
			} else if value.Valid {
				pr.PictureURL = value.String
			}
		case profile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case profile.FieldBiography:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field biography", values[i])
			} else if value.Valid {
				pr.Biography = value.String
			}
		case profile.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				pr.Email = value.String
			}
		case profile.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pr.Phone = value.String
			}
		case profile.FieldIsEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_email_verified", values[i])
			} else if value.Valid {
				pr.IsEmailVerified = value.Bool
			}
		case profile.FieldIsPhoneVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_phone_verified", values[i])
			} else if value.Valid {
				pr.IsPhoneVerified = value.Bool
			}
		case profile.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryPhotos queries the "photos" edge of the Profile entity.
func (pr *Profile) QueryPhotos() *PhotosMetadataQuery {
	return (&ProfileClient{config: pr.config}).QueryPhotos(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return (&ProfileClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", username=")
	builder.WriteString(pr.Username)
	builder.WriteString(", password_hash=<sensitive>")
	builder.WriteString(", picture_url=")
	builder.WriteString(pr.PictureURL)
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", biography=")
	builder.WriteString(pr.Biography)
	builder.WriteString(", email=")
	builder.WriteString(pr.Email)
	builder.WriteString(", phone=")
	builder.WriteString(pr.Phone)
	builder.WriteString(", is_email_verified=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsEmailVerified))
	builder.WriteString(", is_phone_verified=")
	builder.WriteString(fmt.Sprintf("%v", pr.IsPhoneVerified))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile

func (pr Profiles) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
