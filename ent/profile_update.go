// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baturalpk/photo-bucket/ent/photosmetadata"
	"github.com/baturalpk/photo-bucket/ent/predicate"
	"github.com/baturalpk/photo-bucket/ent/profile"
	"github.com/google/uuid"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUsername sets the "username" field.
func (pu *ProfileUpdate) SetUsername(s string) *ProfileUpdate {
	pu.mutation.SetUsername(s)
	return pu
}

// SetPasswordHash sets the "password_hash" field.
func (pu *ProfileUpdate) SetPasswordHash(s string) *ProfileUpdate {
	pu.mutation.SetPasswordHash(s)
	return pu
}

// SetPictureURL sets the "picture_url" field.
func (pu *ProfileUpdate) SetPictureURL(s string) *ProfileUpdate {
	pu.mutation.SetPictureURL(s)
	return pu
}

// SetNillablePictureURL sets the "picture_url" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePictureURL(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetPictureURL(*s)
	}
	return pu
}

// ClearPictureURL clears the value of the "picture_url" field.
func (pu *ProfileUpdate) ClearPictureURL() *ProfileUpdate {
	pu.mutation.ClearPictureURL()
	return pu
}

// SetName sets the "name" field.
func (pu *ProfileUpdate) SetName(s string) *ProfileUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableName(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetBiography sets the "biography" field.
func (pu *ProfileUpdate) SetBiography(s string) *ProfileUpdate {
	pu.mutation.SetBiography(s)
	return pu
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableBiography(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetBiography(*s)
	}
	return pu
}

// SetEmail sets the "email" field.
func (pu *ProfileUpdate) SetEmail(s string) *ProfileUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableEmail(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetEmail(*s)
	}
	return pu
}

// ClearEmail clears the value of the "email" field.
func (pu *ProfileUpdate) ClearEmail() *ProfileUpdate {
	pu.mutation.ClearEmail()
	return pu
}

// SetPhone sets the "phone" field.
func (pu *ProfileUpdate) SetPhone(s string) *ProfileUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePhone(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// ClearPhone clears the value of the "phone" field.
func (pu *ProfileUpdate) ClearPhone() *ProfileUpdate {
	pu.mutation.ClearPhone()
	return pu
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (pu *ProfileUpdate) SetIsEmailVerified(b bool) *ProfileUpdate {
	pu.mutation.SetIsEmailVerified(b)
	return pu
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableIsEmailVerified(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetIsEmailVerified(*b)
	}
	return pu
}

// SetIsPhoneVerified sets the "is_phone_verified" field.
func (pu *ProfileUpdate) SetIsPhoneVerified(b bool) *ProfileUpdate {
	pu.mutation.SetIsPhoneVerified(b)
	return pu
}

// SetNillableIsPhoneVerified sets the "is_phone_verified" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableIsPhoneVerified(b *bool) *ProfileUpdate {
	if b != nil {
		pu.SetIsPhoneVerified(*b)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProfileUpdate) SetCreatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableCreatedAt(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// AddPhotoIDs adds the "photos" edge to the PhotosMetadata entity by IDs.
func (pu *ProfileUpdate) AddPhotoIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.AddPhotoIDs(ids...)
	return pu
}

// AddPhotos adds the "photos" edges to the PhotosMetadata entity.
func (pu *ProfileUpdate) AddPhotos(p ...*PhotosMetadata) *ProfileUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPhotoIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearPhotos clears all "photos" edges to the PhotosMetadata entity.
func (pu *ProfileUpdate) ClearPhotos() *ProfileUpdate {
	pu.mutation.ClearPhotos()
	return pu
}

// RemovePhotoIDs removes the "photos" edge to PhotosMetadata entities by IDs.
func (pu *ProfileUpdate) RemovePhotoIDs(ids ...uuid.UUID) *ProfileUpdate {
	pu.mutation.RemovePhotoIDs(ids...)
	return pu
}

// RemovePhotos removes "photos" edges to PhotosMetadata entities.
func (pu *ProfileUpdate) RemovePhotos(p ...*PhotosMetadata) *ProfileUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePhotoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfileUpdate) check() error {
	if v, ok := pu.mutation.Username(); ok {
		if err := profile.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Profile.username": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PasswordHash(); ok {
		if err := profile.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Profile.password_hash": %w`, err)}
		}
	}
	return nil
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profile.Table,
			Columns: profile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profile.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldUsername,
		})
	}
	if value, ok := pu.mutation.PasswordHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPasswordHash,
		})
	}
	if value, ok := pu.mutation.PictureURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPictureURL,
		})
	}
	if pu.mutation.PictureURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profile.FieldPictureURL,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldName,
		})
	}
	if value, ok := pu.mutation.Biography(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldBiography,
		})
	}
	if value, ok := pu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldEmail,
		})
	}
	if pu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profile.FieldEmail,
		})
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPhone,
		})
	}
	if pu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profile.FieldPhone,
		})
	}
	if value, ok := pu.mutation.IsEmailVerified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldIsEmailVerified,
		})
	}
	if value, ok := pu.mutation.IsPhoneVerified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldIsPhoneVerified,
		})
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profile.FieldCreatedAt,
		})
	}
	if pu.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !pu.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetUsername sets the "username" field.
func (puo *ProfileUpdateOne) SetUsername(s string) *ProfileUpdateOne {
	puo.mutation.SetUsername(s)
	return puo
}

// SetPasswordHash sets the "password_hash" field.
func (puo *ProfileUpdateOne) SetPasswordHash(s string) *ProfileUpdateOne {
	puo.mutation.SetPasswordHash(s)
	return puo
}

// SetPictureURL sets the "picture_url" field.
func (puo *ProfileUpdateOne) SetPictureURL(s string) *ProfileUpdateOne {
	puo.mutation.SetPictureURL(s)
	return puo
}

// SetNillablePictureURL sets the "picture_url" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePictureURL(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetPictureURL(*s)
	}
	return puo
}

// ClearPictureURL clears the value of the "picture_url" field.
func (puo *ProfileUpdateOne) ClearPictureURL() *ProfileUpdateOne {
	puo.mutation.ClearPictureURL()
	return puo
}

// SetName sets the "name" field.
func (puo *ProfileUpdateOne) SetName(s string) *ProfileUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableName(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetBiography sets the "biography" field.
func (puo *ProfileUpdateOne) SetBiography(s string) *ProfileUpdateOne {
	puo.mutation.SetBiography(s)
	return puo
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableBiography(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetBiography(*s)
	}
	return puo
}

// SetEmail sets the "email" field.
func (puo *ProfileUpdateOne) SetEmail(s string) *ProfileUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableEmail(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetEmail(*s)
	}
	return puo
}

// ClearEmail clears the value of the "email" field.
func (puo *ProfileUpdateOne) ClearEmail() *ProfileUpdateOne {
	puo.mutation.ClearEmail()
	return puo
}

// SetPhone sets the "phone" field.
func (puo *ProfileUpdateOne) SetPhone(s string) *ProfileUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePhone(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// ClearPhone clears the value of the "phone" field.
func (puo *ProfileUpdateOne) ClearPhone() *ProfileUpdateOne {
	puo.mutation.ClearPhone()
	return puo
}

// SetIsEmailVerified sets the "is_email_verified" field.
func (puo *ProfileUpdateOne) SetIsEmailVerified(b bool) *ProfileUpdateOne {
	puo.mutation.SetIsEmailVerified(b)
	return puo
}

// SetNillableIsEmailVerified sets the "is_email_verified" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableIsEmailVerified(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetIsEmailVerified(*b)
	}
	return puo
}

// SetIsPhoneVerified sets the "is_phone_verified" field.
func (puo *ProfileUpdateOne) SetIsPhoneVerified(b bool) *ProfileUpdateOne {
	puo.mutation.SetIsPhoneVerified(b)
	return puo
}

// SetNillableIsPhoneVerified sets the "is_phone_verified" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableIsPhoneVerified(b *bool) *ProfileUpdateOne {
	if b != nil {
		puo.SetIsPhoneVerified(*b)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProfileUpdateOne) SetCreatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableCreatedAt(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// AddPhotoIDs adds the "photos" edge to the PhotosMetadata entity by IDs.
func (puo *ProfileUpdateOne) AddPhotoIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.AddPhotoIDs(ids...)
	return puo
}

// AddPhotos adds the "photos" edges to the PhotosMetadata entity.
func (puo *ProfileUpdateOne) AddPhotos(p ...*PhotosMetadata) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPhotoIDs(ids...)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearPhotos clears all "photos" edges to the PhotosMetadata entity.
func (puo *ProfileUpdateOne) ClearPhotos() *ProfileUpdateOne {
	puo.mutation.ClearPhotos()
	return puo
}

// RemovePhotoIDs removes the "photos" edge to PhotosMetadata entities by IDs.
func (puo *ProfileUpdateOne) RemovePhotoIDs(ids ...uuid.UUID) *ProfileUpdateOne {
	puo.mutation.RemovePhotoIDs(ids...)
	return puo
}

// RemovePhotos removes "photos" edges to PhotosMetadata entities.
func (puo *ProfileUpdateOne) RemovePhotos(p ...*PhotosMetadata) *ProfileUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePhotoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	var (
		err  error
		node *Profile
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfileUpdateOne) check() error {
	if v, ok := puo.mutation.Username(); ok {
		if err := profile.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Profile.username": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PasswordHash(); ok {
		if err := profile.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "Profile.password_hash": %w`, err)}
		}
	}
	return nil
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profile.Table,
			Columns: profile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profile.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldUsername,
		})
	}
	if value, ok := puo.mutation.PasswordHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPasswordHash,
		})
	}
	if value, ok := puo.mutation.PictureURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPictureURL,
		})
	}
	if puo.mutation.PictureURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profile.FieldPictureURL,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldName,
		})
	}
	if value, ok := puo.mutation.Biography(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldBiography,
		})
	}
	if value, ok := puo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldEmail,
		})
	}
	if puo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profile.FieldEmail,
		})
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPhone,
		})
	}
	if puo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: profile.FieldPhone,
		})
	}
	if value, ok := puo.mutation.IsEmailVerified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldIsEmailVerified,
		})
	}
	if value, ok := puo.mutation.IsPhoneVerified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldIsPhoneVerified,
		})
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profile.FieldCreatedAt,
		})
	}
	if puo.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPhotosIDs(); len(nodes) > 0 && !puo.mutation.PhotosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PhotosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.PhotosTable,
			Columns: []string{profile.PhotosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: photosmetadata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
