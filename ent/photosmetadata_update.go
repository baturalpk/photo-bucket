// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baturalpk/photo-bucket/ent/photosmetadata"
	"github.com/baturalpk/photo-bucket/ent/predicate"
	"github.com/baturalpk/photo-bucket/ent/profile"
	"github.com/google/uuid"
)

// PhotosMetadataUpdate is the builder for updating PhotosMetadata entities.
type PhotosMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *PhotosMetadataMutation
}

// Where appends a list predicates to the PhotosMetadataUpdate builder.
func (pmu *PhotosMetadataUpdate) Where(ps ...predicate.PhotosMetadata) *PhotosMetadataUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetOwnerID sets the "owner_id" field.
func (pmu *PhotosMetadataUpdate) SetOwnerID(u uuid.UUID) *PhotosMetadataUpdate {
	pmu.mutation.SetOwnerID(u)
	return pmu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pmu *PhotosMetadataUpdate) SetNillableOwnerID(u *uuid.UUID) *PhotosMetadataUpdate {
	if u != nil {
		pmu.SetOwnerID(*u)
	}
	return pmu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pmu *PhotosMetadataUpdate) ClearOwnerID() *PhotosMetadataUpdate {
	pmu.mutation.ClearOwnerID()
	return pmu
}

// SetTags sets the "tags" field.
func (pmu *PhotosMetadataUpdate) SetTags(s []string) *PhotosMetadataUpdate {
	pmu.mutation.SetTags(s)
	return pmu
}

// ClearTags clears the value of the "tags" field.
func (pmu *PhotosMetadataUpdate) ClearTags() *PhotosMetadataUpdate {
	pmu.mutation.ClearTags()
	return pmu
}

// SetDescription sets the "description" field.
func (pmu *PhotosMetadataUpdate) SetDescription(s string) *PhotosMetadataUpdate {
	pmu.mutation.SetDescription(s)
	return pmu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmu *PhotosMetadataUpdate) SetNillableDescription(s *string) *PhotosMetadataUpdate {
	if s != nil {
		pmu.SetDescription(*s)
	}
	return pmu
}

// ClearDescription clears the value of the "description" field.
func (pmu *PhotosMetadataUpdate) ClearDescription() *PhotosMetadataUpdate {
	pmu.mutation.ClearDescription()
	return pmu
}

// SetUploadedAt sets the "uploaded_at" field.
func (pmu *PhotosMetadataUpdate) SetUploadedAt(t time.Time) *PhotosMetadataUpdate {
	pmu.mutation.SetUploadedAt(t)
	return pmu
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (pmu *PhotosMetadataUpdate) SetNillableUploadedAt(t *time.Time) *PhotosMetadataUpdate {
	if t != nil {
		pmu.SetUploadedAt(*t)
	}
	return pmu
}

// SetOwner sets the "owner" edge to the Profile entity.
func (pmu *PhotosMetadataUpdate) SetOwner(p *Profile) *PhotosMetadataUpdate {
	return pmu.SetOwnerID(p.ID)
}

// Mutation returns the PhotosMetadataMutation object of the builder.
func (pmu *PhotosMetadataUpdate) Mutation() *PhotosMetadataMutation {
	return pmu.mutation
}

// ClearOwner clears the "owner" edge to the Profile entity.
func (pmu *PhotosMetadataUpdate) ClearOwner() *PhotosMetadataUpdate {
	pmu.mutation.ClearOwner()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PhotosMetadataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pmu.hooks) == 0 {
		affected, err = pmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhotosMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmu.mutation = mutation
			affected, err = pmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pmu.hooks) - 1; i >= 0; i-- {
			if pmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PhotosMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PhotosMetadataUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PhotosMetadataUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmu *PhotosMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   photosmetadata.Table,
			Columns: photosmetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: photosmetadata.FieldID,
			},
		},
	}
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: photosmetadata.FieldTags,
		})
	}
	if pmu.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: photosmetadata.FieldTags,
		})
	}
	if value, ok := pmu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photosmetadata.FieldDescription,
		})
	}
	if pmu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photosmetadata.FieldDescription,
		})
	}
	if value, ok := pmu.mutation.UploadedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: photosmetadata.FieldUploadedAt,
		})
	}
	if pmu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photosmetadata.OwnerTable,
			Columns: []string{photosmetadata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photosmetadata.OwnerTable,
			Columns: []string{photosmetadata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photosmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PhotosMetadataUpdateOne is the builder for updating a single PhotosMetadata entity.
type PhotosMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhotosMetadataMutation
}

// SetOwnerID sets the "owner_id" field.
func (pmuo *PhotosMetadataUpdateOne) SetOwnerID(u uuid.UUID) *PhotosMetadataUpdateOne {
	pmuo.mutation.SetOwnerID(u)
	return pmuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pmuo *PhotosMetadataUpdateOne) SetNillableOwnerID(u *uuid.UUID) *PhotosMetadataUpdateOne {
	if u != nil {
		pmuo.SetOwnerID(*u)
	}
	return pmuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pmuo *PhotosMetadataUpdateOne) ClearOwnerID() *PhotosMetadataUpdateOne {
	pmuo.mutation.ClearOwnerID()
	return pmuo
}

// SetTags sets the "tags" field.
func (pmuo *PhotosMetadataUpdateOne) SetTags(s []string) *PhotosMetadataUpdateOne {
	pmuo.mutation.SetTags(s)
	return pmuo
}

// ClearTags clears the value of the "tags" field.
func (pmuo *PhotosMetadataUpdateOne) ClearTags() *PhotosMetadataUpdateOne {
	pmuo.mutation.ClearTags()
	return pmuo
}

// SetDescription sets the "description" field.
func (pmuo *PhotosMetadataUpdateOne) SetDescription(s string) *PhotosMetadataUpdateOne {
	pmuo.mutation.SetDescription(s)
	return pmuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pmuo *PhotosMetadataUpdateOne) SetNillableDescription(s *string) *PhotosMetadataUpdateOne {
	if s != nil {
		pmuo.SetDescription(*s)
	}
	return pmuo
}

// ClearDescription clears the value of the "description" field.
func (pmuo *PhotosMetadataUpdateOne) ClearDescription() *PhotosMetadataUpdateOne {
	pmuo.mutation.ClearDescription()
	return pmuo
}

// SetUploadedAt sets the "uploaded_at" field.
func (pmuo *PhotosMetadataUpdateOne) SetUploadedAt(t time.Time) *PhotosMetadataUpdateOne {
	pmuo.mutation.SetUploadedAt(t)
	return pmuo
}

// SetNillableUploadedAt sets the "uploaded_at" field if the given value is not nil.
func (pmuo *PhotosMetadataUpdateOne) SetNillableUploadedAt(t *time.Time) *PhotosMetadataUpdateOne {
	if t != nil {
		pmuo.SetUploadedAt(*t)
	}
	return pmuo
}

// SetOwner sets the "owner" edge to the Profile entity.
func (pmuo *PhotosMetadataUpdateOne) SetOwner(p *Profile) *PhotosMetadataUpdateOne {
	return pmuo.SetOwnerID(p.ID)
}

// Mutation returns the PhotosMetadataMutation object of the builder.
func (pmuo *PhotosMetadataUpdateOne) Mutation() *PhotosMetadataMutation {
	return pmuo.mutation
}

// ClearOwner clears the "owner" edge to the Profile entity.
func (pmuo *PhotosMetadataUpdateOne) ClearOwner() *PhotosMetadataUpdateOne {
	pmuo.mutation.ClearOwner()
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PhotosMetadataUpdateOne) Select(field string, fields ...string) *PhotosMetadataUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PhotosMetadata entity.
func (pmuo *PhotosMetadataUpdateOne) Save(ctx context.Context) (*PhotosMetadata, error) {
	var (
		err  error
		node *PhotosMetadata
	)
	if len(pmuo.hooks) == 0 {
		node, err = pmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PhotosMetadataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmuo.mutation = mutation
			node, err = pmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pmuo.hooks) - 1; i >= 0; i-- {
			if pmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PhotosMetadataUpdateOne) SaveX(ctx context.Context) *PhotosMetadata {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PhotosMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PhotosMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmuo *PhotosMetadataUpdateOne) sqlSave(ctx context.Context) (_node *PhotosMetadata, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   photosmetadata.Table,
			Columns: photosmetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: photosmetadata.FieldID,
			},
		},
	}
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PhotosMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photosmetadata.FieldID)
		for _, f := range fields {
			if !photosmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != photosmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: photosmetadata.FieldTags,
		})
	}
	if pmuo.mutation.TagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: photosmetadata.FieldTags,
		})
	}
	if value, ok := pmuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: photosmetadata.FieldDescription,
		})
	}
	if pmuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: photosmetadata.FieldDescription,
		})
	}
	if value, ok := pmuo.mutation.UploadedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: photosmetadata.FieldUploadedAt,
		})
	}
	if pmuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photosmetadata.OwnerTable,
			Columns: []string{photosmetadata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   photosmetadata.OwnerTable,
			Columns: []string{photosmetadata.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PhotosMetadata{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photosmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
